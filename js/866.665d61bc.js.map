{"version":3,"file":"js/866.665d61bc.js","mappings":"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","sources":["webpack://mid-term-project/./src/views/DashboardMetrics.vue?bbc2","webpack://mid-term-project/./src/views/DashboardMetrics.vue","webpack://mid-term-project/./src/views/DashboardMetrics.vue?8b74"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, unref as _unref, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\"\n\nconst _hoisted_1 = { class: \"p-6\" }\nconst _hoisted_2 = { class: \"md:flex md:items-center md:justify-between mb-6\" }\nconst _hoisted_3 = { class: \"mt-4 flex space-x-3 md:mt-0\" }\nconst _hoisted_4 = { class: \"grid grid-cols-1 gap-6 lg:grid-cols-2\" }\nconst _hoisted_5 = { class: \"bg-white rounded-lg shadow p-6\" }\nconst _hoisted_6 = { class: \"h-80\" }\nconst _hoisted_7 = { class: \"bg-white rounded-lg shadow p-6\" }\nconst _hoisted_8 = { class: \"h-80\" }\nconst _hoisted_9 = { class: \"bg-white rounded-lg shadow p-6\" }\nconst _hoisted_10 = { class: \"h-80\" }\nconst _hoisted_11 = { class: \"bg-white rounded-lg shadow p-6\" }\nconst _hoisted_12 = { class: \"h-80\" }\nconst _hoisted_13 = { class: \"mt-6 bg-white rounded-lg shadow\" }\nconst _hoisted_14 = { class: \"px-4 py-5 sm:p-6\" }\nconst _hoisted_15 = { class: \"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\" }\nconst _hoisted_16 = { class: \"text-sm font-medium text-gray-500\" }\nconst _hoisted_17 = { class: \"mt-1 flex items-baseline justify-between\" }\nconst _hoisted_18 = { class: \"text-2xl font-semibold\" }\n\nimport { ref, onMounted, onUnmounted, watch } from 'vue';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport { Line } from 'vue-chartjs';\r\n\r\n// Register Chart.js components\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'DashboardMetrics',\n  setup(__props) {\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst timeRange = ref('24h');\r\n\r\n// Chart configurations\r\nconst temperatureData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Temperature (°C)',\r\n    backgroundColor: 'rgba(239, 68, 68, 0.2)',\r\n    borderColor: '#EF4444',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst humidityData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Humidity (%)',\r\n    backgroundColor: 'rgba(59, 130, 246, 0.2)',\r\n    borderColor: '#3B82F6',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst soilMoistureData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Soil Moisture (%)',\r\n    backgroundColor: 'rgba(16, 185, 129, 0.2)',\r\n    borderColor: '#10B981',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst lightLevelData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Light Level (lux)',\r\n    backgroundColor: 'rgba(245, 158, 11, 0.2)',\r\n    borderColor: '#F59E0B',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst chartOptions = {\r\n  temperature: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Temperature (°C)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  humidity: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 100,\r\n        title: {\r\n          display: true,\r\n          text: 'Humidity (%)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  soilMoisture: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 100,\r\n        title: {\r\n          display: true,\r\n          text: 'Soil Moisture (%)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  lightLevel: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Light Level (lux)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst statistics = ref({\r\n  avgTemp: {\r\n    label: 'Average Temperature',\r\n    value: '23.5°C',\r\n    trend: 2.4\r\n  },\r\n  avgHumidity: {\r\n    label: 'Average Humidity',\r\n    value: '65%',\r\n    trend: -1.2\r\n  },\r\n  avgMoisture: {\r\n    label: 'Average Soil Moisture',\r\n    value: '72%',\r\n    trend: 0.8\r\n  },\r\n  avgLight: {\r\n    label: 'Average Light Level',\r\n    value: '5240 lux',\r\n    trend: 3.5\r\n  }\r\n});\r\n\r\nconst getTimeframeData = (timeframe: string) => {\r\n  let dataPoints: number;\r\n  let interval: number;\r\n\r\n  switch (timeframe) {\r\n    case '1h':\r\n      dataPoints = 60; // One point per minute\r\n      interval = 60000; // 1 minute in milliseconds\r\n      break;\r\n    case '24h':\r\n      dataPoints = 144; // One point per 10 minutes\r\n      interval = 600000; // 10 minutes in milliseconds\r\n      break;\r\n    case '7d':\r\n      dataPoints = 168; // One point per hour\r\n      interval = 3600000; // 1 hour in milliseconds\r\n      break;\r\n    case '30d':\r\n      dataPoints = 180; // One point per 4 hours\r\n      interval = 14400000; // 4 hours in milliseconds\r\n      break;\r\n    default:\r\n      dataPoints = 144;\r\n      interval = 600000;\r\n  }\r\n\r\n  const now = new Date();\r\n  const labels = [];\r\n  const data = {\r\n    temperature: [],\r\n    humidity: [],\r\n    soilMoisture: [],\r\n    lightLevel: []\r\n  };\r\n\r\n  for (let i = dataPoints - 1; i >= 0; i--) {\r\n    const time = new Date(now.getTime() - (i * interval));\r\n    \r\n    // Format label based on timeframe\r\n    let label;\r\n    if (timeframe === '1h') {\r\n      label = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else if (timeframe === '24h') {\r\n      label = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else {\r\n      label = time.toLocaleDateString([], { month: 'short', day: 'numeric', hour: '2-digit' });\r\n    }\r\n    labels.push(label);\r\n\r\n    // Generate realistic data with trends\r\n    const hourOfDay = time.getHours();\r\n    const dayTrend = Math.sin((hourOfDay - 6) * Math.PI / 12); // Peak at noon, low at midnight\r\n\r\n    // Temperature: varies between 18-28°C with daily cycle\r\n    const tempBase = 23 + (dayTrend * 5);\r\n    data.temperature.push(+(tempBase + (Math.random() * 2 - 1)).toFixed(1));\r\n\r\n    // Humidity: inverse to temperature\r\n    const humidityBase = 55 - (dayTrend * 15);\r\n    data.humidity.push(+(humidityBase + (Math.random() * 5 - 2.5)).toFixed(1));\r\n\r\n    // Soil Moisture: slowly varies\r\n    const moistureBase = 65 + (Math.sin(i * 0.1) * 15);\r\n    data.soilMoisture.push(+(moistureBase + (Math.random() * 3 - 1.5)).toFixed(1));\r\n\r\n    // Light Level: follows daily cycle\r\n    const lightBase = Math.max(0, dayTrend * 8000);\r\n    data.lightLevel.push(Math.floor(lightBase + (Math.random() * 1000)));\r\n  }\r\n\r\n  return { labels, data };\r\n};\r\n\r\nconst updateChartData = () => {\r\n  const { labels, data } = getTimeframeData(timeRange.value);\r\n\r\n  temperatureData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...temperatureData.value.datasets[0],\r\n      data: data.temperature\r\n    }]\r\n  };\r\n\r\n  humidityData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...humidityData.value.datasets[0],\r\n      data: data.humidity\r\n    }]\r\n  };\r\n\r\n  soilMoistureData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...soilMoistureData.value.datasets[0],\r\n      data: data.soilMoisture\r\n    }]\r\n  };\r\n\r\n  lightLevelData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...lightLevelData.value.datasets[0],\r\n      data: data.lightLevel\r\n    }]\r\n  };\r\n\r\n  // Update statistics\r\n  statistics.value = {\r\n    avgTemp: {\r\n      label: 'Average Temperature',\r\n      value: `${(data.temperature.reduce((a, b) => a + b, 0) / data.temperature.length).toFixed(1)}°C`,\r\n      trend: +((data.temperature[data.temperature.length - 1] - data.temperature[0]).toFixed(1))\r\n    },\r\n    avgHumidity: {\r\n      label: 'Average Humidity',\r\n      value: `${(data.humidity.reduce((a, b) => a + b, 0) / data.humidity.length).toFixed(1)}%`,\r\n      trend: +((data.humidity[data.humidity.length - 1] - data.humidity[0]).toFixed(1))\r\n    },\r\n    avgMoisture: {\r\n      label: 'Average Soil Moisture',\r\n      value: `${(data.soilMoisture.reduce((a, b) => a + b, 0) / data.soilMoisture.length).toFixed(1)}%`,\r\n      trend: +((data.soilMoisture[data.soilMoisture.length - 1] - data.soilMoisture[0]).toFixed(1))\r\n    },\r\n    avgLight: {\r\n      label: 'Average Light Level',\r\n      value: `${Math.round(data.lightLevel.reduce((a, b) => a + b, 0) / data.lightLevel.length)} lux`,\r\n      trend: +((data.lightLevel[data.lightLevel.length - 1] - data.lightLevel[0]) / 100).toFixed(1)\r\n    }\r\n  };\r\n};\r\n\r\nconst exportData = () => {\r\n  const data = {\r\n    timeRange: timeRange.value,\r\n    temperature: temperatureData.value,\r\n    humidity: humidityData.value,\r\n    soilMoisture: soilMoistureData.value,\r\n    lightLevel: lightLevelData.value,\r\n    statistics: statistics.value\r\n  };\r\n\r\n  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = `greenhouse-metrics-${timeRange.value}-${new Date().toISOString()}.json`;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\n// Watch for timeRange changes\r\nwatch(timeRange, (newValue) => {\r\n  updateChartData();\r\n});\r\n\r\n// Initialize data\r\nonMounted(() => {\r\n  updateChartData();\r\n  \r\n  // Update data periodically based on timeframe\r\n  const updateInterval = setInterval(() => {\r\n    if (timeRange.value === '1h') {\r\n      updateChartData();\r\n    }\r\n  }, 60000); // Update every minute for 1h view\r\n\r\n  onUnmounted(() => {\r\n    clearInterval(updateInterval);\r\n  });\r\n});\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _cache[2] || (_cache[2] = _createElementVNode(\"h2\", { class: \"text-2xl font-bold text-gray-900\" }, \"Metrics & Analytics\", -1)),\n      _createElementVNode(\"div\", _hoisted_3, [\n        _withDirectives(_createElementVNode(\"select\", {\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((timeRange).value = $event)),\n          class: \"rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n        }, _cache[1] || (_cache[1] = [\n          _createElementVNode(\"option\", { value: \"1h\" }, \"Last Hour\", -1),\n          _createElementVNode(\"option\", { value: \"24h\" }, \"Last 24 Hours\", -1),\n          _createElementVNode(\"option\", { value: \"7d\" }, \"Last 7 Days\", -1),\n          _createElementVNode(\"option\", { value: \"30d\" }, \"Last 30 Days\", -1)\n        ]), 512), [\n          [_vModelSelect, timeRange.value]\n        ]),\n        _createElementVNode(\"button\", {\n          onClick: exportData,\n          class: \"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700\"\n        }, \" Export Data \")\n      ])\n    ]),\n    _createElementVNode(\"div\", _hoisted_4, [\n      _createElementVNode(\"div\", _hoisted_5, [\n        _cache[3] || (_cache[3] = _createElementVNode(\"h3\", { class: \"text-lg font-medium mb-4\" }, \"Temperature Trends\", -1)),\n        _createElementVNode(\"div\", _hoisted_6, [\n          _createVNode(_unref(Line), {\n            data: temperatureData.value,\n            options: chartOptions.temperature\n          }, null, 8, [\"data\", \"options\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_7, [\n        _cache[4] || (_cache[4] = _createElementVNode(\"h3\", { class: \"text-lg font-medium mb-4\" }, \"Humidity Trends\", -1)),\n        _createElementVNode(\"div\", _hoisted_8, [\n          _createVNode(_unref(Line), {\n            data: humidityData.value,\n            options: chartOptions.humidity\n          }, null, 8, [\"data\", \"options\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_9, [\n        _cache[5] || (_cache[5] = _createElementVNode(\"h3\", { class: \"text-lg font-medium mb-4\" }, \"Soil Moisture Trends\", -1)),\n        _createElementVNode(\"div\", _hoisted_10, [\n          _createVNode(_unref(Line), {\n            data: soilMoistureData.value,\n            options: chartOptions.soilMoisture\n          }, null, 8, [\"data\", \"options\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_11, [\n        _cache[6] || (_cache[6] = _createElementVNode(\"h3\", { class: \"text-lg font-medium mb-4\" }, \"Light Level Trends\", -1)),\n        _createElementVNode(\"div\", _hoisted_12, [\n          _createVNode(_unref(Line), {\n            data: lightLevelData.value,\n            options: chartOptions.lightLevel\n          }, null, 8, [\"data\", \"options\"])\n        ])\n      ])\n    ]),\n    _createElementVNode(\"div\", _hoisted_13, [\n      _createElementVNode(\"div\", _hoisted_14, [\n        _cache[7] || (_cache[7] = _createElementVNode(\"h3\", { class: \"text-lg font-medium mb-4\" }, \"Statistics Summary\", -1)),\n        _createElementVNode(\"div\", _hoisted_15, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(statistics.value, (stat, key) => {\n            return (_openBlock(), _createElementBlock(\"div\", {\n              key: key,\n              class: \"p-4 border rounded-lg\"\n            }, [\n              _createElementVNode(\"h4\", _hoisted_16, _toDisplayString(stat.label), 1),\n              _createElementVNode(\"div\", _hoisted_17, [\n                _createElementVNode(\"div\", _hoisted_18, _toDisplayString(stat.value), 1),\n                _createElementVNode(\"div\", {\n                  class: _normalizeClass(`text-sm ${stat.trend >= 0 ? 'text-green-600' : 'text-red-600'}`)\n                }, _toDisplayString(stat.trend >= 0 ? '+' : '') + _toDisplayString(stat.trend) + \"% \", 3)\n              ])\n            ]))\n          }), 128))\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n})","<template>\r\n  <div class=\"p-6\">\r\n    <div class=\"md:flex md:items-center md:justify-between mb-6\">\r\n      <h2 class=\"text-2xl font-bold text-gray-900\">Metrics & Analytics</h2>\r\n      <div class=\"mt-4 flex space-x-3 md:mt-0\">\r\n        <select \r\n          v-model=\"timeRange\" \r\n          class=\"rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n        >\r\n          <option value=\"1h\">Last Hour</option>\r\n          <option value=\"24h\">Last 24 Hours</option>\r\n          <option value=\"7d\">Last 7 Days</option>\r\n          <option value=\"30d\">Last 30 Days</option>\r\n        </select>\r\n        <button \r\n          @click=\"exportData\"\r\n          class=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700\"\r\n        >\r\n          Export Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Grid -->\r\n    <div class=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n      <!-- Temperature Chart -->\r\n      <div class=\"bg-white rounded-lg shadow p-6\">\r\n        <h3 class=\"text-lg font-medium mb-4\">Temperature Trends</h3>\r\n        <div class=\"h-80\">\r\n          <Line \r\n            :data=\"temperatureData\" \r\n            :options=\"chartOptions.temperature\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Humidity Chart -->\r\n      <div class=\"bg-white rounded-lg shadow p-6\">\r\n        <h3 class=\"text-lg font-medium mb-4\">Humidity Trends</h3>\r\n        <div class=\"h-80\">\r\n          <Line \r\n            :data=\"humidityData\" \r\n            :options=\"chartOptions.humidity\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Soil Moisture Chart -->\r\n      <div class=\"bg-white rounded-lg shadow p-6\">\r\n        <h3 class=\"text-lg font-medium mb-4\">Soil Moisture Trends</h3>\r\n        <div class=\"h-80\">\r\n          <Line \r\n            :data=\"soilMoistureData\" \r\n            :options=\"chartOptions.soilMoisture\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Light Level Chart -->\r\n      <div class=\"bg-white rounded-lg shadow p-6\">\r\n        <h3 class=\"text-lg font-medium mb-4\">Light Level Trends</h3>\r\n        <div class=\"h-80\">\r\n          <Line \r\n            :data=\"lightLevelData\" \r\n            :options=\"chartOptions.lightLevel\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Statistics Summary -->\r\n    <div class=\"mt-6 bg-white rounded-lg shadow\">\r\n      <div class=\"px-4 py-5 sm:p-6\">\r\n        <h3 class=\"text-lg font-medium mb-4\">Statistics Summary</h3>\r\n        <div class=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\">\r\n          <div v-for=\"(stat, key) in statistics\" :key=\"key\" class=\"p-4 border rounded-lg\">\r\n            <h4 class=\"text-sm font-medium text-gray-500\">{{ stat.label }}</h4>\r\n            <div class=\"mt-1 flex items-baseline justify-between\">\r\n              <div class=\"text-2xl font-semibold\">{{ stat.value }}</div>\r\n              <div :class=\"`text-sm ${stat.trend >= 0 ? 'text-green-600' : 'text-red-600'}`\">\r\n                {{ stat.trend >= 0 ? '+' : '' }}{{ stat.trend }}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch } from 'vue';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport { Line } from 'vue-chartjs';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst timeRange = ref('24h');\r\n\r\n// Chart configurations\r\nconst temperatureData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Temperature (°C)',\r\n    backgroundColor: 'rgba(239, 68, 68, 0.2)',\r\n    borderColor: '#EF4444',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst humidityData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Humidity (%)',\r\n    backgroundColor: 'rgba(59, 130, 246, 0.2)',\r\n    borderColor: '#3B82F6',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst soilMoistureData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Soil Moisture (%)',\r\n    backgroundColor: 'rgba(16, 185, 129, 0.2)',\r\n    borderColor: '#10B981',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst lightLevelData = ref({\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Light Level (lux)',\r\n    backgroundColor: 'rgba(245, 158, 11, 0.2)',\r\n    borderColor: '#F59E0B',\r\n    data: [],\r\n    tension: 0.4\r\n  }]\r\n});\r\n\r\nconst chartOptions = {\r\n  temperature: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Temperature (°C)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  humidity: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 100,\r\n        title: {\r\n          display: true,\r\n          text: 'Humidity (%)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  soilMoisture: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 100,\r\n        title: {\r\n          display: true,\r\n          text: 'Soil Moisture (%)'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  lightLevel: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Light Level (lux)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst statistics = ref({\r\n  avgTemp: {\r\n    label: 'Average Temperature',\r\n    value: '23.5°C',\r\n    trend: 2.4\r\n  },\r\n  avgHumidity: {\r\n    label: 'Average Humidity',\r\n    value: '65%',\r\n    trend: -1.2\r\n  },\r\n  avgMoisture: {\r\n    label: 'Average Soil Moisture',\r\n    value: '72%',\r\n    trend: 0.8\r\n  },\r\n  avgLight: {\r\n    label: 'Average Light Level',\r\n    value: '5240 lux',\r\n    trend: 3.5\r\n  }\r\n});\r\n\r\nconst getTimeframeData = (timeframe: string) => {\r\n  let dataPoints: number;\r\n  let interval: number;\r\n\r\n  switch (timeframe) {\r\n    case '1h':\r\n      dataPoints = 60; // One point per minute\r\n      interval = 60000; // 1 minute in milliseconds\r\n      break;\r\n    case '24h':\r\n      dataPoints = 144; // One point per 10 minutes\r\n      interval = 600000; // 10 minutes in milliseconds\r\n      break;\r\n    case '7d':\r\n      dataPoints = 168; // One point per hour\r\n      interval = 3600000; // 1 hour in milliseconds\r\n      break;\r\n    case '30d':\r\n      dataPoints = 180; // One point per 4 hours\r\n      interval = 14400000; // 4 hours in milliseconds\r\n      break;\r\n    default:\r\n      dataPoints = 144;\r\n      interval = 600000;\r\n  }\r\n\r\n  const now = new Date();\r\n  const labels = [];\r\n  const data = {\r\n    temperature: [],\r\n    humidity: [],\r\n    soilMoisture: [],\r\n    lightLevel: []\r\n  };\r\n\r\n  for (let i = dataPoints - 1; i >= 0; i--) {\r\n    const time = new Date(now.getTime() - (i * interval));\r\n    \r\n    // Format label based on timeframe\r\n    let label;\r\n    if (timeframe === '1h') {\r\n      label = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else if (timeframe === '24h') {\r\n      label = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else {\r\n      label = time.toLocaleDateString([], { month: 'short', day: 'numeric', hour: '2-digit' });\r\n    }\r\n    labels.push(label);\r\n\r\n    // Generate realistic data with trends\r\n    const hourOfDay = time.getHours();\r\n    const dayTrend = Math.sin((hourOfDay - 6) * Math.PI / 12); // Peak at noon, low at midnight\r\n\r\n    // Temperature: varies between 18-28°C with daily cycle\r\n    const tempBase = 23 + (dayTrend * 5);\r\n    data.temperature.push(+(tempBase + (Math.random() * 2 - 1)).toFixed(1));\r\n\r\n    // Humidity: inverse to temperature\r\n    const humidityBase = 55 - (dayTrend * 15);\r\n    data.humidity.push(+(humidityBase + (Math.random() * 5 - 2.5)).toFixed(1));\r\n\r\n    // Soil Moisture: slowly varies\r\n    const moistureBase = 65 + (Math.sin(i * 0.1) * 15);\r\n    data.soilMoisture.push(+(moistureBase + (Math.random() * 3 - 1.5)).toFixed(1));\r\n\r\n    // Light Level: follows daily cycle\r\n    const lightBase = Math.max(0, dayTrend * 8000);\r\n    data.lightLevel.push(Math.floor(lightBase + (Math.random() * 1000)));\r\n  }\r\n\r\n  return { labels, data };\r\n};\r\n\r\nconst updateChartData = () => {\r\n  const { labels, data } = getTimeframeData(timeRange.value);\r\n\r\n  temperatureData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...temperatureData.value.datasets[0],\r\n      data: data.temperature\r\n    }]\r\n  };\r\n\r\n  humidityData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...humidityData.value.datasets[0],\r\n      data: data.humidity\r\n    }]\r\n  };\r\n\r\n  soilMoistureData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...soilMoistureData.value.datasets[0],\r\n      data: data.soilMoisture\r\n    }]\r\n  };\r\n\r\n  lightLevelData.value = {\r\n    labels,\r\n    datasets: [{\r\n      ...lightLevelData.value.datasets[0],\r\n      data: data.lightLevel\r\n    }]\r\n  };\r\n\r\n  // Update statistics\r\n  statistics.value = {\r\n    avgTemp: {\r\n      label: 'Average Temperature',\r\n      value: `${(data.temperature.reduce((a, b) => a + b, 0) / data.temperature.length).toFixed(1)}°C`,\r\n      trend: +((data.temperature[data.temperature.length - 1] - data.temperature[0]).toFixed(1))\r\n    },\r\n    avgHumidity: {\r\n      label: 'Average Humidity',\r\n      value: `${(data.humidity.reduce((a, b) => a + b, 0) / data.humidity.length).toFixed(1)}%`,\r\n      trend: +((data.humidity[data.humidity.length - 1] - data.humidity[0]).toFixed(1))\r\n    },\r\n    avgMoisture: {\r\n      label: 'Average Soil Moisture',\r\n      value: `${(data.soilMoisture.reduce((a, b) => a + b, 0) / data.soilMoisture.length).toFixed(1)}%`,\r\n      trend: +((data.soilMoisture[data.soilMoisture.length - 1] - data.soilMoisture[0]).toFixed(1))\r\n    },\r\n    avgLight: {\r\n      label: 'Average Light Level',\r\n      value: `${Math.round(data.lightLevel.reduce((a, b) => a + b, 0) / data.lightLevel.length)} lux`,\r\n      trend: +((data.lightLevel[data.lightLevel.length - 1] - data.lightLevel[0]) / 100).toFixed(1)\r\n    }\r\n  };\r\n};\r\n\r\nconst exportData = () => {\r\n  const data = {\r\n    timeRange: timeRange.value,\r\n    temperature: temperatureData.value,\r\n    humidity: humidityData.value,\r\n    soilMoisture: soilMoistureData.value,\r\n    lightLevel: lightLevelData.value,\r\n    statistics: statistics.value\r\n  };\r\n\r\n  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = `greenhouse-metrics-${timeRange.value}-${new Date().toISOString()}.json`;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\n// Watch for timeRange changes\r\nwatch(timeRange, (newValue) => {\r\n  updateChartData();\r\n});\r\n\r\n// Initialize data\r\nonMounted(() => {\r\n  updateChartData();\r\n  \r\n  // Update data periodically based on timeframe\r\n  const updateInterval = setInterval(() => {\r\n    if (timeRange.value === '1h') {\r\n      updateChartData();\r\n    }\r\n  }, 60000); // Update every minute for 1h view\r\n\r\n  onUnmounted(() => {\r\n    clearInterval(updateInterval);\r\n  });\r\n});\r\n</script>\r\n","import script from \"./DashboardMetrics.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./DashboardMetrics.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_defineComponent","__name","setup","__props","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","timeRange","ref","temperatureData","labels","datasets","label","backgroundColor","borderColor","data","tension","humidityData","soilMoistureData","lightLevelData","chartOptions","temperature","responsive","maintainAspectRatio","plugins","legend","position","scales","y","beginAtZero","title","display","text","humidity","max","soilMoisture","lightLevel","statistics","avgTemp","value","trend","avgHumidity","avgMoisture","avgLight","getTimeframeData","timeframe","dataPoints","interval","now","Date","i","time","getTime","toLocaleTimeString","hour","minute","toLocaleDateString","month","day","push","hourOfDay","getHours","dayTrend","Math","sin","PI","tempBase","random","toFixed","humidityBase","moistureBase","lightBase","floor","updateChartData","_getTimeframeData","_objectSpread","concat","reduce","a","b","length","round","exportData","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","document","createElement","href","download","toISOString","body","appendChild","click","removeChild","revokeObjectURL","watch","newValue","onMounted","updateInterval","setInterval","onUnmounted","clearInterval","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","_withDirectives","$event","_vModelSelect","onClick","_createVNode","_unref","Line","options","_Fragment","_renderList","stat","key","_toDisplayString","_normalizeClass","__exports__"],"sourceRoot":""}
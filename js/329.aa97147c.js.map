{"version":3,"file":"js/329.aa97147c.js","mappings":"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","sources":["webpack://mid-term-project/./src/views/DashboardOverview.vue?7bf8","webpack://mid-term-project/./src/views/DashboardOverview.vue","webpack://mid-term-project/./src/views/DashboardOverview.vue?467d"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelSelect as _vModelSelect, withDirectives as _withDirectives, unref as _unref, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"p-6\" }\nconst _hoisted_2 = { class: \"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\" }\nconst _hoisted_3 = { class: \"bg-white overflow-hidden shadow rounded-lg\" }\nconst _hoisted_4 = { class: \"p-5\" }\nconst _hoisted_5 = { class: \"flex justify-between\" }\nconst _hoisted_6 = { class: \"mt-1 text-3xl font-semibold text-gray-900\" }\nconst _hoisted_7 = { class: \"bg-white overflow-hidden shadow rounded-lg\" }\nconst _hoisted_8 = { class: \"p-5\" }\nconst _hoisted_9 = { class: \"flex justify-between\" }\nconst _hoisted_10 = { class: \"mt-1 text-3xl font-semibold text-gray-900\" }\nconst _hoisted_11 = { class: \"bg-white overflow-hidden shadow rounded-lg\" }\nconst _hoisted_12 = { class: \"p-5\" }\nconst _hoisted_13 = { class: \"flex justify-between\" }\nconst _hoisted_14 = { class: \"mt-1 text-3xl font-semibold text-gray-900\" }\nconst _hoisted_15 = { class: \"bg-white overflow-hidden shadow rounded-lg\" }\nconst _hoisted_16 = { class: \"p-5\" }\nconst _hoisted_17 = { class: \"flex justify-between\" }\nconst _hoisted_18 = { class: \"mt-1 text-3xl font-semibold text-gray-900\" }\nconst _hoisted_19 = { class: \"mt-6 bg-white shadow rounded-lg p-4\" }\nconst _hoisted_20 = { class: \"flex justify-between items-center\" }\nconst _hoisted_21 = { class: \"flex items-center space-x-4\" }\nconst _hoisted_22 = { class: \"mt-6 grid grid-cols-1 lg:grid-cols-2 gap-6\" }\nconst _hoisted_23 = { class: \"bg-white p-6 rounded-lg shadow\" }\nconst _hoisted_24 = { class: \"h-64\" }\nconst _hoisted_25 = { class: \"bg-white p-6 rounded-lg shadow\" }\nconst _hoisted_26 = { class: \"h-64\" }\n\nimport { ref, shallowRef, onMounted, onUnmounted } from 'vue';\r\n  import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  } from 'chart.js';\r\n  import { Line } from 'vue-chartjs';\r\n  \r\n  // Register Chart.js components\r\n  interface Metrics {\r\n    temperature: number;\r\n    humidity: number;\r\n    soilMoisture: number;\r\n    lightLevel: number;\r\n  }\r\n  \r\n  // State\r\n  \nexport default /*@__PURE__*/_defineComponent({\n  __name: 'DashboardOverview',\n  setup(__props) {\n\r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n  \r\n  const metrics = ref<Metrics>({\r\n    temperature: 0,\r\n    humidity: 0,\r\n    soilMoisture: 0,\r\n    lightLevel: 0\r\n  });\r\n  \r\n  const isAutoRefreshing = ref(true);\r\n  const refreshInterval = ref(3000);\r\n  \r\n  const thresholds = {\r\n    temperature: { min: 18, max: 28 },\r\n    humidity: { min: 40, max: 70 },\r\n    soilMoisture: { min: 50, max: 80 },\r\n    lightLevel: { min: 2000, max: 8000 }\r\n  };\r\n  \r\n  // Chart data\r\n  const chartData = shallowRef({\r\n    labels: [],\r\n    datasets: [{\r\n      label: 'Temperature (Â°C)',\r\n      borderColor: '#3B82F6',\r\n      data: [],\r\n      fill: false\r\n    }]\r\n  });\r\n  \r\n  const humidityChartData = shallowRef({\r\n    labels: [],\r\n    datasets: [{\r\n      label: 'Humidity (%)',\r\n      borderColor: '#10B981',\r\n      data: [],\r\n      fill: false\r\n    }]\r\n  });\r\n  \r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Methods\r\n  const getStatusColor = (metric: keyof Metrics) => {\r\n    const value = metrics.value[metric];\r\n    const threshold = thresholds[metric];\r\n    \r\n    if (value > threshold.max) return 'text-red-600';\r\n    if (value < threshold.min) return 'text-yellow-600';\r\n    return 'text-green-600';\r\n  };\r\n  \r\n  const getStatusText = (metric: keyof Metrics) => {\r\n    const value = metrics.value[metric];\r\n    const threshold = thresholds[metric];\r\n    \r\n    if (value > threshold.max) return 'High';\r\n    if (value < threshold.min) return 'Low';\r\n    return 'Normal';\r\n  };\r\n  \r\n  const updateMetrics = () => {\r\n    // Update metrics with random data\r\n    metrics.value = {\r\n      temperature: +(20 + Math.random() * 10).toFixed(1),\r\n      humidity: +(50 + Math.random() * 30).toFixed(1),\r\n      soilMoisture: +(60 + Math.random() * 20).toFixed(1),\r\n      lightLevel: Math.floor(1000 + Math.random() * 9000)\r\n    };\r\n  \r\n    // Update chart data\r\n    const now = new Date();\r\n    const timeStr = now.toLocaleTimeString();\r\n    \r\n    // Update temperature chart\r\n    chartData.value = {\r\n      labels: [...(chartData.value.labels.slice(-9) || []), timeStr],\r\n      datasets: [{\r\n        ...chartData.value.datasets[0],\r\n        data: [...(chartData.value.datasets[0].data.slice(-9) || []), metrics.value.temperature]\r\n      }]\r\n    };\r\n  \r\n    // Update humidity chart\r\n    humidityChartData.value = {\r\n      labels: [...(humidityChartData.value.labels.slice(-9) || []), timeStr],\r\n      datasets: [{\r\n        ...humidityChartData.value.datasets[0],\r\n        data: [...(humidityChartData.value.datasets[0].data.slice(-9) || []), metrics.value.humidity]\r\n      }]\r\n    };\r\n  };\r\n  \r\n  const toggleAutoRefresh = () => {\r\n    isAutoRefreshing.value = !isAutoRefreshing.value;\r\n    if (isAutoRefreshing.value) {\r\n      updateInterval = window.setInterval(updateMetrics, refreshInterval.value);\r\n    } else {\r\n      clearInterval(updateInterval);\r\n    }\r\n  };\r\n  \r\n  let updateInterval: number;\r\n  \r\n  // Lifecycle hooks\r\n  onMounted(() => {\r\n    updateMetrics();\r\n    updateInterval = window.setInterval(updateMetrics, refreshInterval.value);\r\n  });\r\n  \r\n  onUnmounted(() => {\r\n    if (updateInterval) {\r\n      clearInterval(updateInterval);\r\n    }\r\n  });\r\n  \nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _cache[8] || (_cache[8] = _createElementVNode(\"h1\", { class: \"text-2xl font-semibold text-gray-900 mb-6\" }, \"Dashboard Overview\", -1)),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createElementVNode(\"div\", _hoisted_4, [\n          _createElementVNode(\"div\", _hoisted_5, [\n            _createElementVNode(\"div\", null, [\n              _cache[1] || (_cache[1] = _createElementVNode(\"p\", { class: \"text-sm font-medium text-gray-500 truncate\" }, \"Temperature\", -1)),\n              _createElementVNode(\"p\", _hoisted_6, _toDisplayString(metrics.value.temperature) + \"Â°C\", 1)\n            ]),\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(`mt-1 text-sm ${getStatusColor('temperature')}`)\n            }, _toDisplayString(getStatusText('temperature')), 3)\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_7, [\n        _createElementVNode(\"div\", _hoisted_8, [\n          _createElementVNode(\"div\", _hoisted_9, [\n            _createElementVNode(\"div\", null, [\n              _cache[2] || (_cache[2] = _createElementVNode(\"p\", { class: \"text-sm font-medium text-gray-500 truncate\" }, \"Humidity\", -1)),\n              _createElementVNode(\"p\", _hoisted_10, _toDisplayString(metrics.value.humidity) + \"%\", 1)\n            ]),\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(`mt-1 text-sm ${getStatusColor('humidity')}`)\n            }, _toDisplayString(getStatusText('humidity')), 3)\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_11, [\n        _createElementVNode(\"div\", _hoisted_12, [\n          _createElementVNode(\"div\", _hoisted_13, [\n            _createElementVNode(\"div\", null, [\n              _cache[3] || (_cache[3] = _createElementVNode(\"p\", { class: \"text-sm font-medium text-gray-500 truncate\" }, \"Soil Moisture\", -1)),\n              _createElementVNode(\"p\", _hoisted_14, _toDisplayString(metrics.value.soilMoisture) + \"%\", 1)\n            ]),\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(`mt-1 text-sm ${getStatusColor('soilMoisture')}`)\n            }, _toDisplayString(getStatusText('soilMoisture')), 3)\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_15, [\n        _createElementVNode(\"div\", _hoisted_16, [\n          _createElementVNode(\"div\", _hoisted_17, [\n            _createElementVNode(\"div\", null, [\n              _cache[4] || (_cache[4] = _createElementVNode(\"p\", { class: \"text-sm font-medium text-gray-500 truncate\" }, \"Light Level\", -1)),\n              _createElementVNode(\"p\", _hoisted_18, _toDisplayString(metrics.value.lightLevel) + \" lux\", 1)\n            ]),\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(`mt-1 text-sm ${getStatusColor('lightLevel')}`)\n            }, _toDisplayString(getStatusText('lightLevel')), 3)\n          ])\n        ])\n      ])\n    ]),\n    _createElementVNode(\"div\", _hoisted_19, [\n      _createElementVNode(\"div\", _hoisted_20, [\n        _createElementVNode(\"div\", _hoisted_21, [\n          _createElementVNode(\"button\", {\n            onClick: toggleAutoRefresh,\n            class: _normalizeClass(`px-4 py-2 rounded-md text-sm font-medium ${\r\n                isAutoRefreshing.value \r\n                  ? 'bg-green-600 text-white hover:bg-green-700' \r\n                  : 'bg-red-600 text-white hover:bg-red-700'\r\n              }`)\n          }, _toDisplayString(isAutoRefreshing.value ? 'Auto Refresh On' : 'Auto Refresh Off'), 3),\n          _withDirectives(_createElementVNode(\"select\", {\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((refreshInterval).value = $event)),\n            class: \"rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n          }, _cache[5] || (_cache[5] = [\n            _createElementVNode(\"option\", { value: 1000 }, \"1 second\", -1),\n            _createElementVNode(\"option\", { value: 3000 }, \"3 seconds\", -1),\n            _createElementVNode(\"option\", { value: 5000 }, \"5 seconds\", -1)\n          ]), 512), [\n            [_vModelSelect, refreshInterval.value]\n          ])\n        ]),\n        _createElementVNode(\"button\", {\n          onClick: updateMetrics,\n          class: \"px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700\"\n        }, \" Refresh Now \")\n      ])\n    ]),\n    _createElementVNode(\"div\", _hoisted_22, [\n      _createElementVNode(\"div\", _hoisted_23, [\n        _cache[6] || (_cache[6] = _createElementVNode(\"h3\", { class: \"text-lg font-medium text-gray-900 mb-4\" }, \"Temperature History\", -1)),\n        _createElementVNode(\"div\", _hoisted_24, [\n          (chartData.value.labels.length)\n            ? (_openBlock(), _createBlock(_unref(Line), {\n                key: 0,\n                data: chartData.value,\n                options: chartOptions\n              }, null, 8, [\"data\"]))\n            : _createCommentVNode(\"\", true)\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_25, [\n        _cache[7] || (_cache[7] = _createElementVNode(\"h3\", { class: \"text-lg font-medium text-gray-900 mb-4\" }, \"Humidity History\", -1)),\n        _createElementVNode(\"div\", _hoisted_26, [\n          (humidityChartData.value.labels.length)\n            ? (_openBlock(), _createBlock(_unref(Line), {\n                key: 0,\n                data: humidityChartData.value,\n                options: chartOptions\n              }, null, 8, [\"data\"]))\n            : _createCommentVNode(\"\", true)\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n})","<template>\r\n    <div class=\"p-6\">\r\n      <h1 class=\"text-2xl font-semibold text-gray-900 mb-6\">Dashboard Overview</h1>\r\n  \r\n      <!-- Metrics Grid -->\r\n      <div class=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\r\n        <!-- Temperature Card -->\r\n        <div class=\"bg-white overflow-hidden shadow rounded-lg\">\r\n          <div class=\"p-5\">\r\n            <div class=\"flex justify-between\">\r\n              <div>\r\n                <p class=\"text-sm font-medium text-gray-500 truncate\">Temperature</p>\r\n                <p class=\"mt-1 text-3xl font-semibold text-gray-900\">{{ metrics.temperature }}Â°C</p>\r\n              </div>\r\n              <div :class=\"`mt-1 text-sm ${getStatusColor('temperature')}`\">\r\n                {{ getStatusText('temperature') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Humidity Card -->\r\n        <div class=\"bg-white overflow-hidden shadow rounded-lg\">\r\n          <div class=\"p-5\">\r\n            <div class=\"flex justify-between\">\r\n              <div>\r\n                <p class=\"text-sm font-medium text-gray-500 truncate\">Humidity</p>\r\n                <p class=\"mt-1 text-3xl font-semibold text-gray-900\">{{ metrics.humidity }}%</p>\r\n              </div>\r\n              <div :class=\"`mt-1 text-sm ${getStatusColor('humidity')}`\">\r\n                {{ getStatusText('humidity') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Soil Moisture Card -->\r\n        <div class=\"bg-white overflow-hidden shadow rounded-lg\">\r\n          <div class=\"p-5\">\r\n            <div class=\"flex justify-between\">\r\n              <div>\r\n                <p class=\"text-sm font-medium text-gray-500 truncate\">Soil Moisture</p>\r\n                <p class=\"mt-1 text-3xl font-semibold text-gray-900\">{{ metrics.soilMoisture }}%</p>\r\n              </div>\r\n              <div :class=\"`mt-1 text-sm ${getStatusColor('soilMoisture')}`\">\r\n                {{ getStatusText('soilMoisture') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Light Level Card -->\r\n        <div class=\"bg-white overflow-hidden shadow rounded-lg\">\r\n          <div class=\"p-5\">\r\n            <div class=\"flex justify-between\">\r\n              <div>\r\n                <p class=\"text-sm font-medium text-gray-500 truncate\">Light Level</p>\r\n                <p class=\"mt-1 text-3xl font-semibold text-gray-900\">{{ metrics.lightLevel }} lux</p>\r\n              </div>\r\n              <div :class=\"`mt-1 text-sm ${getStatusColor('lightLevel')}`\">\r\n                {{ getStatusText('lightLevel') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Controls -->\r\n      <div class=\"mt-6 bg-white shadow rounded-lg p-4\">\r\n        <div class=\"flex justify-between items-center\">\r\n          <div class=\"flex items-center space-x-4\">\r\n            <button \r\n              @click=\"toggleAutoRefresh\" \r\n              :class=\"`px-4 py-2 rounded-md text-sm font-medium ${\r\n                isAutoRefreshing \r\n                  ? 'bg-green-600 text-white hover:bg-green-700' \r\n                  : 'bg-red-600 text-white hover:bg-red-700'\r\n              }`\"\r\n            >\r\n              {{ isAutoRefreshing ? 'Auto Refresh On' : 'Auto Refresh Off' }}\r\n            </button>\r\n            <select \r\n              v-model=\"refreshInterval\" \r\n              class=\"rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            >\r\n              <option :value=\"1000\">1 second</option>\r\n              <option :value=\"3000\">3 seconds</option>\r\n              <option :value=\"5000\">5 seconds</option>\r\n            </select>\r\n          </div>\r\n          <button \r\n            @click=\"updateMetrics\"\r\n            class=\"px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700\"\r\n          >\r\n            Refresh Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Charts -->\r\n      <div class=\"mt-6 grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <!-- Temperature Line Chart -->\r\n        <div class=\"bg-white p-6 rounded-lg shadow\">\r\n          <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Temperature History</h3>\r\n          <div class=\"h-64\">\r\n            <Line v-if=\"chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Humidity Line Chart -->\r\n        <div class=\"bg-white p-6 rounded-lg shadow\">\r\n          <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Humidity History</h3>\r\n          <div class=\"h-64\">\r\n            <Line v-if=\"humidityChartData.labels.length\" :data=\"humidityChartData\" :options=\"chartOptions\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup lang=\"ts\">\r\n  import { ref, shallowRef, onMounted, onUnmounted } from 'vue';\r\n  import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  } from 'chart.js';\r\n  import { Line } from 'vue-chartjs';\r\n  \r\n  // Register Chart.js components\r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n  \r\n  interface Metrics {\r\n    temperature: number;\r\n    humidity: number;\r\n    soilMoisture: number;\r\n    lightLevel: number;\r\n  }\r\n  \r\n  // State\r\n  const metrics = ref<Metrics>({\r\n    temperature: 0,\r\n    humidity: 0,\r\n    soilMoisture: 0,\r\n    lightLevel: 0\r\n  });\r\n  \r\n  const isAutoRefreshing = ref(true);\r\n  const refreshInterval = ref(3000);\r\n  \r\n  const thresholds = {\r\n    temperature: { min: 18, max: 28 },\r\n    humidity: { min: 40, max: 70 },\r\n    soilMoisture: { min: 50, max: 80 },\r\n    lightLevel: { min: 2000, max: 8000 }\r\n  };\r\n  \r\n  // Chart data\r\n  const chartData = shallowRef({\r\n    labels: [],\r\n    datasets: [{\r\n      label: 'Temperature (Â°C)',\r\n      borderColor: '#3B82F6',\r\n      data: [],\r\n      fill: false\r\n    }]\r\n  });\r\n  \r\n  const humidityChartData = shallowRef({\r\n    labels: [],\r\n    datasets: [{\r\n      label: 'Humidity (%)',\r\n      borderColor: '#10B981',\r\n      data: [],\r\n      fill: false\r\n    }]\r\n  });\r\n  \r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Methods\r\n  const getStatusColor = (metric: keyof Metrics) => {\r\n    const value = metrics.value[metric];\r\n    const threshold = thresholds[metric];\r\n    \r\n    if (value > threshold.max) return 'text-red-600';\r\n    if (value < threshold.min) return 'text-yellow-600';\r\n    return 'text-green-600';\r\n  };\r\n  \r\n  const getStatusText = (metric: keyof Metrics) => {\r\n    const value = metrics.value[metric];\r\n    const threshold = thresholds[metric];\r\n    \r\n    if (value > threshold.max) return 'High';\r\n    if (value < threshold.min) return 'Low';\r\n    return 'Normal';\r\n  };\r\n  \r\n  const updateMetrics = () => {\r\n    // Update metrics with random data\r\n    metrics.value = {\r\n      temperature: +(20 + Math.random() * 10).toFixed(1),\r\n      humidity: +(50 + Math.random() * 30).toFixed(1),\r\n      soilMoisture: +(60 + Math.random() * 20).toFixed(1),\r\n      lightLevel: Math.floor(1000 + Math.random() * 9000)\r\n    };\r\n  \r\n    // Update chart data\r\n    const now = new Date();\r\n    const timeStr = now.toLocaleTimeString();\r\n    \r\n    // Update temperature chart\r\n    chartData.value = {\r\n      labels: [...(chartData.value.labels.slice(-9) || []), timeStr],\r\n      datasets: [{\r\n        ...chartData.value.datasets[0],\r\n        data: [...(chartData.value.datasets[0].data.slice(-9) || []), metrics.value.temperature]\r\n      }]\r\n    };\r\n  \r\n    // Update humidity chart\r\n    humidityChartData.value = {\r\n      labels: [...(humidityChartData.value.labels.slice(-9) || []), timeStr],\r\n      datasets: [{\r\n        ...humidityChartData.value.datasets[0],\r\n        data: [...(humidityChartData.value.datasets[0].data.slice(-9) || []), metrics.value.humidity]\r\n      }]\r\n    };\r\n  };\r\n  \r\n  const toggleAutoRefresh = () => {\r\n    isAutoRefreshing.value = !isAutoRefreshing.value;\r\n    if (isAutoRefreshing.value) {\r\n      updateInterval = window.setInterval(updateMetrics, refreshInterval.value);\r\n    } else {\r\n      clearInterval(updateInterval);\r\n    }\r\n  };\r\n  \r\n  let updateInterval: number;\r\n  \r\n  // Lifecycle hooks\r\n  onMounted(() => {\r\n    updateMetrics();\r\n    updateInterval = window.setInterval(updateMetrics, refreshInterval.value);\r\n  });\r\n  \r\n  onUnmounted(() => {\r\n    if (updateInterval) {\r\n      clearInterval(updateInterval);\r\n    }\r\n  });\r\n  </script>","import script from \"./DashboardOverview.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./DashboardOverview.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_defineComponent","__name","setup","__props","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","updateInterval","metrics","ref","temperature","humidity","soilMoisture","lightLevel","isAutoRefreshing","refreshInterval","thresholds","min","max","chartData","shallowRef","labels","datasets","label","borderColor","data","fill","humidityChartData","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","getStatusColor","metric","value","threshold","getStatusText","updateMetrics","Math","random","toFixed","floor","now","Date","timeStr","toLocaleTimeString","concat","_toConsumableArray","slice","_objectSpread","toggleAutoRefresh","window","setInterval","clearInterval","onMounted","onUnmounted","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_normalizeClass","onClick","_withDirectives","$event","_vModelSelect","length","_createBlock","_unref","Line","key","options","_createCommentVNode","__exports__"],"sourceRoot":""}